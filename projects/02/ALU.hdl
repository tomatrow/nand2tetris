// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // The letters prefixing the variable match the possible gates passed through. 
    // The most recent gates are on the left, like polish notation. 
    // Insignificant variables are abbreviated. 
    // Bus slices are indicated by a postfixed m..n.

    Mux16 (a = x, b = false, sel = zx, out = ZeroX);

    Not16 (in = ZeroX, out = NZx);
    Mux16 (a = ZeroX, b = NZx, sel = nx, out = NotZeroX);

    Mux16 (a = y, b = false, sel = zy, out = ZeroY);

    Not16 (in = ZeroY, out = NZy);
    Mux16 (a = ZeroY, b = NZy, sel = ny, out = NotZeroY);

    Add16 (a = NotZeroX, b = NotZeroY, out = AddNZXY);
    And16 (a = NotZeroX, b = NotZeroY, out = AndNZXY);
    Mux16 (a = AndNZXY, b = AddNZXY, sel = f, out = FunctionNotZeroXY);

    Not16(in = FunctionNotZeroXY, out = NoFNZXY);
    Mux16 (a = FunctionNotZeroXY, b = NoFNZXY, sel = no, out[0..7] = NoFNZXY0to7, out[8..14] = NoFNZXY8to14, out[15] = NoFNZXY15);

    And16 (a[0..7] = NoFNZXY0to7, a[8..14] = NoFNZXY8to14, a[15] = NoFNZXY15, b[0..7] = NoFNZXY0to7, b[8..14] = NoFNZXY8to14, b[15] = NoFNZXY15, out = out);
    
    Or8Way (in[0..7] = NoFNZXY0to7, out = OrNoFNZxy0to7);
    Or8Way (in[0..6] = NoFNZXY8to14, in[7] = NoFNZXY15, out = OrNoFNZxy8to15);
    Or (a = OrNoFNZxy0to7, b = OrNoFNZxy8to15, out = OrNoFNZxy0to15);
    Not (in = OrNoFNZxy0to15, out = zr);

    And (a = NoFNZXY15, b = true, out = ng);
}